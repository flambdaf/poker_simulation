import collections
from random import shuffle
from collections import defaultdict

# 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ä—Ç—ã –∏ –∫–æ–ª–æ–¥—ã
Card = collections.namedtuple("Card", ["rank", "suit"])


class FrenchDeck:
    ranks = [str(n) for n in range(2, 11)] + list("JQKA")
    suits = "spades diamonds clubs hearts".split()

    def __init__(self):
        self._cards = [Card(rank, suit) for suit in self.suits for rank in self.ranks]

    def __len__(self):
        return len(self._cards)

    def __getitem__(self, position):
        return self._cards[position]

    def shuffle(self):
        shuffle(self._cards)


# 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
def evaluate_hand(cards):
    rank_order = {
        "2": 2,
        "3": 3,
        "4": 4,
        "5": 5,
        "6": 6,
        "7": 7,
        "8": 8,
        "9": 9,
        "10": 10,
        "J": 11,
        "Q": 12,
        "K": 13,
        "A": 14,
    }
    ranks = sorted([rank_order[card.rank] for card in cards])
    suits = [card.suit for card in cards]
    rank_counts = collections.Counter(ranks)
    is_flush = len(set(suits)) == 1
    is_straight = (max(ranks) - min(ranks) == 4) and len(set(ranks)) == 5

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    if is_straight and is_flush:
        return "–°—Ç—Ä–∏—Ç-—Ñ–ª–µ—à" if max(ranks) != 14 else "–†–æ—è–ª-—Ñ–ª–µ—à"
    if 4 in rank_counts.values():
        return "–ö–∞—Ä–µ"
    if sorted(rank_counts.values()) == [2, 3]:
        return "–§—É–ª–ª —Ö–∞—É—Å"
    if is_flush:
        return "–§–ª–µ—à"
    if is_straight:
        return "–°—Ç—Ä–∏—Ç"
    if 3 in rank_counts.values():
        return "–¢—Ä–æ–π–∫–∞"
    if list(rank_counts.values()).count(2) == 2:
        return "–î–≤–µ –ø–∞—Ä—ã"
    if 2 in rank_counts.values():
        return "–ü–∞—Ä–∞"
    return "–°—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞"


# 3. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
def print_stats(stats, total):
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π:")
    print("=" * 50)

    max_count = max(stats.values()) if stats else 1
    scale = 30 / max_count  # –ú–∞—Å—à—Ç–∞–± –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

    for combo in [
        "–†–æ—è–ª-—Ñ–ª–µ—à",
        "–°—Ç—Ä–∏—Ç-—Ñ–ª–µ—à",
        "–ö–∞—Ä–µ",
        "–§—É–ª–ª —Ö–∞—É—Å",
        "–§–ª–µ—à",
        "–°—Ç—Ä–∏—Ç",
        "–¢—Ä–æ–π–∫–∞",
        "–î–≤–µ –ø–∞—Ä—ã",
        "–ü–∞—Ä–∞",
        "–°—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞",
    ]:
        count = stats.get(combo, 0)
        percent = count / total * 100
        bar = "‚ñà" * int(count * scale)
        print(f"{combo:<15}: {percent:6.2f}% | {bar} {count:>6} —Ä–∞–∑")

    print("=" * 50)


# 4. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏
def simulate_poker(num_simulations=10000, num_players=4):
    deck = FrenchDeck()
    stats = defaultdict(int)

    for i in range(1, num_simulations + 1):
        deck.shuffle()
        hands = [deck[i * 5 : (i + 1) * 5] for i in range(num_players)]

        for hand in hands:
            stats[evaluate_hand(hand)] += 1

        # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if i % 1000 == 0:
            print(f"–ü—Ä–æ–≤–µ–¥–µ–Ω–æ {i} —Ä–∞–∑–¥–∞—á...", end="\r")

    print_stats(stats, num_simulations * num_players)


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üéÆ –°–∏–º—É–ª—è—Ç–æ—Ä –ø–æ–∫–µ—Ä–Ω—ã—Ö —Ä–∞–∑–¥–∞—á")
    print("–ò–¥–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—è...")
    simulate_poker(num_simulations=50000, num_players=6)
