import random
import time


class Player:
    def __init__(self, name):
        self.name = name
        self.health = 100
        self.attack = 10
        self.defense = 5
        self.level = 1
        self.experience = 0
        self.inventory = []

    def attack_enemy(self, enemy):
        damage = self.attack - enemy.defense
        if damage > 0:
            enemy.health -= damage
            print(f"{self.name} атакует {enemy.name} и наносит {damage} урона.")
        else:
            print(f"{self.name} не может пробить защиту {enemy.name}.")

    def heal(self):
        self.health += 20
        # if self.health > 100:
        #     self.health = 100
        print(f"{self.name} лечится и восстанавливает 20 здоровья.")

    def add_item(self, item):
        self.inventory.append(item)
        print(f"{self.name} добавляет {item} в инвентарь.")

    def use_item(self, item):
        if item in self.inventory:
            if item == "potion":
                self.heal()
            self.inventory.remove(item)
        else:
            print(f"{self.name} не имеет {item} в инвентаре.")

    def level_up(self):
        self.level += 1
        self.attack += 1



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































        
        self.health += 200
        self.defense *= 2
        print(
            f"{self.name} достиг {self.level} уровня! Атака увеличена на 5, защита на 2."
        )


class Enemy:
    def __init__(self, name, health, attack, defense):
        self.name = name
        self.health = health
        self.attack = attack
        self.defense = defense

    def attack_player(self, player):
        damage = self.attack - player.defense
        if damage > 0:
            player.health -= damage
            print(f"{self.name} атакует {player.name} и наносит {damage} урона.")
        else:
            print(f"{self.name} не может пробить защиту {player.name}.")


def generate_enemy(level):
    # Функция для генерации врага в зависимости от уровня игрока
    enemies = [
        Enemy("Гоблин", 50 + level * 10, 8 + level * 2, 3 + level),
        Enemy("Орк-воин", 80 + level * 15, 12 + level * 3, 5 + level * 2),
        Enemy("Тролль-страж", 120 + level * 20, 15 + level * 4, 8 + level * 3),
        Enemy("Скелет-лучник", 60 + level * 12, 10 + level * 2, 4 + level * 1),
        Enemy("Ядовитый паук", 40 + level * 8, 7 + level * 1, 2 + level * 1),
        Enemy("Зомби-зомби", 70 + level * 14, 11 + level * 3, 6 + level * 2),
        Enemy("Огненный элементаль", 90 + level * 18, 14 + level * 4, 7 + level * 3),
        Enemy("Ледяной голем", 110 + level * 22, 16 + level * 5, 9 + level * 4),
        Enemy("Темный рыцарь", 130 + level * 26, 18 + level * 6, 10 + level * 5),
    ]
    return random.choice(enemies)


def bot_turn(player, enemy):
    # Логика бота: принимает решение на основе состояния игры
    if random.randint(1, 100) == 20:
        return "4", None
    elif player.health < 90:
        return "3", None  # Лечиться
    else:
        return "1", None  # Атаковать


def game():
    player_name = input("Введите имя вашего персонажа: ")
    player = Player(player_name)

    print(f"Добро пожаловать в игру, {player.name}!")

    items = ["меч", "щит", "potion"]  # Добавим зелье
    for item in items:
        player.add_item(item)

    while player.health > 0:
        enemy = generate_enemy(player.level)
        print(f"\nВы встретили {enemy.name}!")

        while player.health > 0 and enemy.health > 0:
            print(f"\n{player.name}: {player.health} здоровья, {player.level} уровень")
            print(f"{enemy.name}: {enemy.health} здоровья")

            # Ход бота
            choice, item_index = bot_turn(player, enemy)
            # time.sleep(0.1)

            if choice == "1":
                player.attack_enemy(enemy)
                if enemy.health <= 0:
                    print(f"{enemy.name} повержен!")
                    player.experience += 60
                    if player.experience >= 100:
                        player.level_up()
                        player.experience -= 100
                    break
                else:
                    enemy.attack_player(player)
            elif choice == "2":
                if player.inventory:
                    if item_index:
                        player.use_item(player.inventory[item_index - 1])
                    else:
                        print("Бот не выбрал предмет.")
                else:
                    print("У вас нет предметов в инвентаре.")
            elif choice == "3":
                player.heal()
            elif choice == "4":
                print("Вы сбежали.")
                break
            else:
                print("Некорректный выбор.")

        if player.health <= 0:
            print("Вы погибли.")
            break

    print("Игра окончена.")


if __name__ == "__main__":
    game()
